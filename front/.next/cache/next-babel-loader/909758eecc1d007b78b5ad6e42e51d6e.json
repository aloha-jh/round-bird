{"ast":null,"code":"import { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SING_UP_REQUEST, LOG_IN_REQUEST, SING_UP_SUCCESS, SING_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI(loginData) {\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  //LOG_OUT_REQUEST 의 액션인자 임. 데이터가여기들어있다!\n  try {\n    yield call(signUpAPI, action.data); //call 매서드가 첫번째는 함수고 두번째는 인자(첫번째함수에 인자로전달되는인자).\n    //throw new Error('에러');\n\n    yield put({\n      type: SING_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SING_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SING_UP_REQUEST, signUp);\n}\n\nfunction logoutAPI() {\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchLogin), fork(watchLoadUser), fork(watchLogout)]);\n}","map":{"version":3,"sources":["C:/Users/ljh/Desktop/all/DigitalGallery/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","delay","takeEvery","LOG_IN_SUCCESS","LOG_IN_FAILURE","SING_UP_REQUEST","LOG_IN_REQUEST","SING_UP_SUCCESS","SING_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","axios","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","logoutAPI","logout","LOG_OUT_FAILURE","watchLogout","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\r\nimport {LOG_IN_SUCCESS, LOG_IN_FAILURE, SING_UP_REQUEST, \r\n    LOG_IN_REQUEST, SING_UP_SUCCESS, SING_UP_FAILURE, \r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS, LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,LOAD_USER_FAILURE } from '../reducers/user';\r\nimport axios from 'axios';\r\n \r\n\r\nfunction loginAPI(loginData){ \r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n} \r\nfunction* login( action ){\r\n    try{ \r\n        const result = yield call(loginAPI, action.data);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n} \r\nfunction* watchLogin(){\r\n    yield takeEvery( LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction signUpAPI( signUpData ){\r\n    return axios.post('/user/',signUpData);\r\n}\r\nfunction* signUp(action){  //LOG_OUT_REQUEST 의 액션인자 임. 데이터가여기들어있다!\r\n    try{ \r\n        yield call(signUpAPI, action.data);  //call 매서드가 첫번째는 함수고 두번째는 인자(첫번째함수에 인자로전달되는인자).\r\n        //throw new Error('에러');\r\n        yield put({\r\n            type: SING_UP_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SING_UP_FAILURE,\r\n            error:e\r\n        })\r\n    }\r\n}  \r\nfunction* watchSignUp(){\r\n    yield takeEvery( SING_UP_REQUEST, signUp)\r\n}\r\n\r\n\r\nfunction logoutAPI(  ){\r\n    return axios.post('/user/logout',{},{\r\n        withCredentials:true,\r\n    });\r\n}\r\nfunction* logout(){   \r\n    try{ \r\n        yield call(logoutAPI );    \r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error:e\r\n        })\r\n    }\r\n}  \r\nfunction* watchLogout(){\r\n    yield takeEvery( LOG_OUT_REQUEST, logout)\r\n}\r\n\r\n\r\nfunction loadUserAPI(   ){\r\n    \r\n    return axios.get('/user/',{\r\n        withCredentials:true,\r\n    });\r\n}\r\nfunction* loadUser( ){   \r\n    try{  \r\n        const result = yield call(loadUserAPI); \r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error:e\r\n        })\r\n    }\r\n}  \r\nfunction* watchLoadUser(){ \r\n    yield takeEvery( LOAD_USER_REQUEST, loadUser)\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork( watchSignUp ),\r\n        fork( watchLogin ), \r\n        fork( watchLoadUser ),\r\n        fork( watchLogout),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}