{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/ljh/Desktop/all/DigitalGallery/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","takeLatest","call","put","take","delay","takeEvery","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","axios","addPostAPI","data","post","withCredentials","action","result","type","console","error"],"mappings":";;oDAWUA,O;qDAcAC,Y;qDAMeC,Q;;AA/BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,EAAiDC,KAAjD,EAAwDC,SAAxD,QAAyE,oBAAzE;AACA,SAAQC,gBAAR,EAA0BC,gBAA1B,EAA4CC,gBAA5C,QACY,kBADZ;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAApB,EAA0B;AAC7BE,IAAAA,eAAe,EAAE;AADY,GAA1B,CAAP;AAGH;;AACD,SAAUlB,OAAV,CAAmBmB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMb,IAAI,CAACS,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAV;;AAFvB;AAEcI,UAAAA,MAFd;AAAA;AAGQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEV,gBADA;AAENK,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQM,UAAAA,OAAO,CAACC,KAAR;AARR;AASQ,iBAAMhB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACT;AADC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMS,SAAS,CAAEG,gBAAF,EAAoBb,OAApB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAAEH,YAAF,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\r\nimport {ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,  \r\n     } from '../reducers/post';\r\nimport axios from 'axios';\r\n  \r\n\r\nfunction addPostAPI(data){ \r\n    return axios.post('/post', data, {\r\n        withCredentials: true,\r\n    });\r\n} \r\nfunction* addPost( action ){\r\n    try{ \r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:ADD_POST_FAILURE\r\n        })\r\n    }\r\n} \r\nfunction* watchAddPost(){\r\n    yield takeEvery( ADD_POST_REQUEST, addPost)\r\n}\r\n\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork( watchAddPost ), \r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}