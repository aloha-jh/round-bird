{"ast":null,"code":"import { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SING_UP_REQUEST, LOG_IN_REQUEST, SING_UP_SUCCESS, SING_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    // yield call(loginAPI);\n    yield delay(100);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('http://localhost:3003/api/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  //LOG_OUT_REQUEST 의 액션인자 임. 데이터가여기들어있다!\n  try {\n    yield call(signUpAPI, action.data); //call 매서드가 첫번째는 함수고 두번째는 인자(첫번째함수에 인자로전달되는인자).\n    //throw new Error('에러');\n\n    yield put({\n      type: SING_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SING_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    yield delay(100);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SING_UP_REQUEST, signUp);\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignUp), fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["C:/Users/ljh/Desktop/all/DigitalGallery/front/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","delay","takeEvery","LOG_IN_SUCCESS","LOG_IN_FAILURE","SING_UP_REQUEST","LOG_IN_REQUEST","SING_UP_SUCCESS","SING_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","axios","loginAPI","post","login","type","e","console","error","signUpAPI","signUpData","signUp","action","data","logout","watchSignUp","watchLogin","watchLogout","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,EAAiDC,KAAjD,EAAwDC,SAAxD,QAAyE,oBAAzE;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,eAAxC,EAAyDC,cAAzD,EAAyEC,eAAzE,EAA0FC,eAA1F,EAA2GC,eAA3G,EAA2HC,eAA3H,QAAkJ,kBAAlJ;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf,SAAOD,KAAK,CAACE,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAiB;AACb,MAAG;AACA;AACC,UAAMb,KAAK,CAAC,GAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAMC,OAAMa,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACX;AADC,KAAD,CAAT;AAGH;AACJ;;AACD,SAASe,SAAT,CAAoBC,UAApB,EAAgC;AAC5B,SAAOT,KAAK,CAACE,IAAN,CAAW,iCAAX,EAA6CO,UAA7C,CAAP;AACH;;AACD,UAAUC,MAAV,CAAiBC,MAAjB,EAAwB;AAAG;AACvB,MAAG;AACC,UAAMxB,IAAI,CAACqB,SAAD,EAAYG,MAAM,CAACC,IAAnB,CAAV,CADD,CACsC;AACrC;;AACA,UAAMxB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GAND,CAMC,OAAMS,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMjB,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAACP,eADC;AAENU,MAAAA,KAAK,EAACF;AAFA,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUQ,MAAV,GAAkB;AACd,MAAG;AACC,UAAMvB,KAAK,CAAC,GAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNgB,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GALD,CAKC,OAAMM,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ;;AAED,UAAUS,WAAV,GAAuB;AACnB,QAAMvB,SAAS,CAAEG,eAAF,EAAmBgB,MAAnB,CAAf;AACH;;AACD,UAAUK,UAAV,GAAsB;AAClB,QAAMxB,SAAS,CAAEI,cAAF,EAAkBQ,KAAlB,CAAf;AACH;;AAED,UAAUa,WAAV,GAAuB;AACnB,QAAMzB,SAAS,CAAEO,eAAF,EAAmBe,MAAnB,CAAf;AACH;;AAED,eAAe,UAAUI,QAAV,GAAoB;AAC/B,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAE6B,WAAF,CADE,EAEN7B,IAAI,CAAE8B,UAAF,CAFE,EAGN9B,IAAI,CAAE+B,WAAF,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, call, put, take, delay, takeEvery } from 'redux-saga/effects';\r\nimport {LOG_IN_SUCCESS, LOG_IN_FAILURE, SING_UP_REQUEST, LOG_IN_REQUEST, SING_UP_SUCCESS, SING_UP_FAILURE, LOG_OUT_REQUEST,LOG_OUT_SUCCESS } from '../reducers/user';\r\nimport axios from 'axios';\r\n \r\nfunction loginAPI(){ \r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* login(){\r\n    try{ \r\n       // yield call(loginAPI);\r\n        yield delay(100);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n} \r\nfunction signUpAPI( signUpData ){\r\n    return axios.post('http://localhost:3003/api/user/',signUpData);\r\n}\r\nfunction* signUp(action){  //LOG_OUT_REQUEST 의 액션인자 임. 데이터가여기들어있다!\r\n    try{ \r\n        yield call(signUpAPI, action.data);  //call 매서드가 첫번째는 함수고 두번째는 인자(첫번째함수에 인자로전달되는인자).\r\n        //throw new Error('에러');\r\n        yield put({\r\n            type: SING_UP_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SING_UP_FAILURE,\r\n            error:e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* logout(){\r\n    try{  \r\n        yield delay(100); \r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }catch(e){\r\n        console.error(e); \r\n    }\r\n} \r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery( SING_UP_REQUEST, signUp)\r\n}\r\nfunction* watchLogin(){\r\n    yield takeEvery( LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery( LOG_OUT_REQUEST, logout)\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork( watchSignUp ),\r\n        fork( watchLogin ), \r\n        fork( watchLogout),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}